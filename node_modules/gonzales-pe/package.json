{
  "_args": [
    [
      "gonzales-pe@git://github.com/gilt/gonzales-pe.git#dev",
      "C:\\Users\\Administrator\\Desktop\\ant\\ant-design\\node_modules\\lesshint-antd"
    ]
  ],
  "_from": "git://github.com/gilt/gonzales-pe.git#dev",
  "_id": "gonzales-pe@3.2.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/gonzales-pe",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/gilt/gonzales-pe/dev/package.json",
      "gitUrl": "git://github.com/gilt/gonzales-pe.git#dev",
      "httpsUrl": "git+https://github.com/gilt/gonzales-pe.git#dev",
      "shortcut": "github:gilt/gonzales-pe#dev",
      "ssh": "git@github.com:gilt/gonzales-pe.git#dev",
      "sshUrl": "git+ssh://git@github.com/gilt/gonzales-pe.git#dev",
      "type": "github"
    },
    "name": "gonzales-pe",
    "raw": "gonzales-pe@git://github.com/gilt/gonzales-pe.git#dev",
    "rawSpec": "git://github.com/gilt/gonzales-pe.git#dev",
    "scope": null,
    "spec": "git://github.com/gilt/gonzales-pe.git#dev",
    "type": "hosted"
  },
  "_requiredBy": [
    "/lesshint-antd"
  ],
  "_resolved": "git://github.com/gilt/gonzales-pe.git#6d1ee5f2900d7017939faf0eeae4597686f1b084",
  "_shasum": "2980ea00d2aa64bb8745c559fd6fe81c6effe42d",
  "_shrinkwrap": null,
  "_spec": "gonzales-pe@git://github.com/gilt/gonzales-pe.git#dev",
  "_where": "C:\\Users\\Administrator\\Desktop\\ant\\ant-design\\node_modules\\lesshint-antd",
  "author": {
    "email": "tonyganch+github@gmail.com",
    "name": "Tony Ganch",
    "url": "http://tonyganch.com"
  },
  "bin": {
    "gonzales": "./bin/gonzales.js"
  },
  "bugs": {
    "url": "http://github.com/tonyganch/gonzales-pe/issues"
  },
  "dependencies": {
    "minimist": "1.1.x"
  },
  "description": "Gonzales Preprocessor Edition (fast CSS parser)",
  "devDependencies": {
    "babel": "^5.5.3",
    "coffee-script": "~1.7.1",
    "jscs": "2.1.0",
    "jshint": "2.8.0",
    "mocha": "2.2.x"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "files": [
    "bin",
    "lib"
  ],
  "gitHead": "6d1ee5f2900d7017939faf0eeae4597686f1b084",
  "homepage": "http://github.com/tonyganch/gonzales-pe",
  "license": "MIT",
  "main": "./lib/gonzales",
  "name": "gonzales-pe",
  "optionalDependencies": {},
  "readme": "# Gonzales PE @dev\r\n\r\n[![Build Status](https://travis-ci.org/tonyganch/gonzales-pe.svg)]\r\n(https://travis-ci.org/tonyganch/gonzales-pe)\r\n\r\nGonzales PE is a CSS parser which plays nicely with preprocessors.    \r\nCurrently those are supported: SCSS, Sass, LESS.\r\n\r\n## Install\r\n\r\n(1) To install command-line tool globally:\r\n\r\n```bash\r\nnpm install -g git://github.com/tonyganch/gonzales-pe.git#dev\r\n```\r\n\r\n(2) To install parser as a project dependency:\r\n\r\n```bash\r\nnpm install --save git://github.com/tonyganch/gonzales-pe.git#dev\r\n```\r\n\r\n(3) If for some reason you want to build files yourself:\r\n\r\n```bash\r\n# Clone the repo.\r\ngit clone git@github.com:tonyganch/gonzales-pe.git\r\n# Go to dev branch.\r\ngit checkout dev\r\n# Install project dependencies.\r\nnpm install\r\n# Install git hooks and build files.\r\nnpm run init\r\n```\r\n\r\n## API\r\n\r\nBasically there are a few things you can do:\r\n\r\n1. parse css string and get a parse tree in return;\r\n2. modify tree nodes;\r\n3. remove tree nodes;\r\n4. add new nodes to the tree;\r\n5. convert modified tree back to a string.\r\n\r\nIn examples below I assume that `gonzales` is a parser module and `parseTree`\r\nis some parsed css:\r\n\r\n```js\r\nlet gonzales = require('gonzales-pe');\r\nlet parseTree = gonzales.parse(css);\r\n```\r\n\r\n### gonzales.createNode(options)\r\n\r\n##### Description\r\n\r\nCreates a new node. Useful when you need to add something to a tree.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>options</td>\r\n    <td>Options to pass to a `Node` constructor.</td>\r\n  </tr>\r\n  <tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>A new node.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nlet css = 'a {color: tomato}';\r\nlet parseTree = gonzales.parse(css);\r\nlet node = gonzales.createNode({ type: 'animal', content: 'panda' });\r\nparseTree.content.push(node);\r\n```\r\n\r\n\r\n### gonzales.parse(css[, options])\r\n\r\n##### Description\r\n\r\nParses a css string.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string}</i></td>\r\n    <td>css</td>\r\n    <td>A string to parse.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>{Object=}</i></td>\r\n    <td>options</td>\r\n    <td>Optional. Additional options:\r\n      <ul>\r\n        <li>\r\n          <code>{string} syntax</code> — any of the following: <code>css</code>,\r\n          <code>less</code>, <code>sass</code>, <code>scss</code>.\r\n          Default one is <code>css</code>.\r\n        </li>\r\n        <li>\r\n          <code>{string} context</code> — root node's type. For a list of available\r\n          values see <a href=\"docs/node-types.md\">\"Node types\"</a>. Default\r\n          one is <code>stylesheet</code>.\r\n        </li>\r\n        <li>\r\n          <code>{number} tabSize</code> — size of a tab character in spaces.\r\n          Default one is 1.\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>Parse tree.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nlet css = 'a {color: tomato}';\r\nlet parseTree = gonzales.parse(css);\r\n```\r\n\r\n```js\r\nlet less = 'a {$color: tomato}';\r\nlet parseTree = gonzales.parse(less, {syntax: 'less'});\r\n```\r\n\r\n```js\r\nlet less = '$color: tomato';\r\nlet parseTree = gonzales.parse(less, {syntax: 'less', rule: 'declaration'});\r\n```\r\n\r\n### parseTree.contains(type)\r\n\r\n##### Description\r\n\r\nChecks whether there is a child node of given type.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string}</i></td>\r\n    <td>type</td>\r\n    <td>\r\n      Node type we're looking for. For a list of available values see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{boolean}</i></td>\r\n    <td>\r\n      <code>true</code> if a tree contains a child node of a given type,\r\n      <code>false</code> otherwise.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nif (parseTree.contains('space')) {\r\n  doSomething();\r\n}\r\n```\r\n\r\n### parseTree.content\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string|Array}</i></td>\r\n    <td>Node's content (child nodes or a string).</td>\r\n  </tr>\r\n</table>\r\n\r\n### parseTree.eachFor([type, ]callback)\r\n\r\n##### Description\r\n\r\nCalls a function for every child node in tree. If `type` parameter is passed,\r\ncalls a function only for child nodes of a given type. The main difference from\r\n`parseTree.forEach()` is that this method loops through node list from the end\r\nto beginning.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string=}</i></td>\r\n    <td>type</td>\r\n    <td>\r\n      Optional. A node type by which to filter child nodes before applying\r\n      a callback function. For a list of available values see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>{Function}</i></td>\r\n    <td>callback</td>\r\n    <td>\r\n      Function to call for every child node. Accepts following parameters:\r\n      <ul>\r\n        <li><code>{Object}</code> — a child node;</li>\r\n        <li><code>{number}</code> — index of the child node in node list;</li>\r\n        <li>\r\n          <code>{Object}</code> — parent node (equals to <code>parseTree</code>).\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nparseTree.eachFor(function(childNode) {\r\n  doSomething(childNode);\r\n});\r\n```\r\n\r\n```js\r\n// Remove all child spaces.\r\nparseTree.eachFor('space', function(spaceNode, i) {\r\n  parseTree.removeChild(i);\r\n});\r\n```\r\n\r\n### parseTree.end\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>\r\n      End position of the node. Contains following info:\r\n      <ul>\r\n        <li>\r\n          <code>{number} line</code> — last symbol's line number\r\n          (1-based index);\r\n        </li>\r\n        <li>\r\n          <code>{number} column</code> — last symbol's column number\r\n          (1-based index).\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n### parseTree.first([type])\r\n\r\n##### Description\r\n\r\nGets the first child node. If `type` parameter is passed, gets the fisrt child\r\nnode of a given type. If no node has been found, returns `null`.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string=}</i></td>\r\n    <td>type</td>\r\n    <td>\r\n      Optional. Node type to look for. For a list of available values see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{?Object}</i></td>\r\n    <td>A node.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nlet node = parseTree.first();\r\nnode.content = 'panda';\r\n```\r\n\r\n```js\r\nlet node = parseTree.first('multilineComment');\r\nnode.content = 'panda';\r\n```\r\n\r\n### parseTree.forEach([type, ]callback)\r\n\r\n##### Description\r\n\r\nCalls a function for every child node in tree. If `type` parameter is passed,\r\ncalls a function only for child nodes of a given type. The main difference from\r\n`parseTree.eachFor()` is that this method loops through node list from the\r\nbeginnig to end.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string=}</i></td>\r\n    <td>type</td>\r\n    <td>\r\n      Optional. A node type by which to filter child nodes before applying\r\n      a callback function. For a list of available values see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>{Function}</i></td>\r\n    <td>callback</td>\r\n    <td>\r\n      Function to call for every child node. Accepts following parameters:\r\n      <ul>\r\n        <li><code>{Object}</code> — a child node;</li>\r\n        <li><code>{number}</code> — index of the child node in node list;</li>\r\n        <li>\r\n          <code>{Object}</code> — parent node (equals to <code>parseTree</code>).\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nparseTree.forEach(function(childNode) {\r\n  doSomething();\r\n});\r\n```\r\n\r\n```js\r\nparseTree.forEach('space', function(spaceNode) {\r\n  doSomething();\r\n});\r\n```\r\n\r\n### parseTree.get(index)\r\n\r\n##### Description\r\n\r\nGets *nth* child of the `parseTree`. If no node has been found, returns `null`.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{number}</i></td>\r\n    <td>index</td>\r\n    <td>Index number of node which we're looking for.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{?Object}</i></td>\r\n    <td>A node.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nvar node = parseTree.get(2);\r\ndoSomething(node);\r\n```\r\n\r\n### parseTree.insert(index, node)\r\n\r\n##### Description\r\n\r\nInserts a node to a given position in `parseTree`.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{number}</i></td>\r\n    <td>index</td>\r\n    <td>Index of position where to insert the node.</td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>node</td>\r\n    <td>A node to insert.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nlet node = gonzales.createNode({type: 'animal', content: 'panda'});\r\nparseTree.insert(2, node);\r\n```\r\n\r\n### parseTree.is(type)\r\n\r\n##### Description\r\n\r\nChecks whether the node is of given type.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string}</i></td>\r\n    <td>type</td>\r\n    <td>\r\n      A node type against which to check type of <code>parseTree</code>.\r\n      For a list of available values see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{boolean}</i></td>\r\n    <td>\r\n      <code>true</code> if types are equal, <code>false</code> otherwise.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nif (node.is('space')) {\r\n  node.content = '';\r\n}\r\n```\r\n\r\n### parseTree.last(type)\r\n\r\nGets the last child node. If `type` parameter is passed, gets the last child\r\nnode of a given type. If no node has been found, returns `null`.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string=}</i></td>\r\n    <td>type</td>\r\n    <td>\r\n      Optional. Node type to look for. For a list of available values see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{?Object}</i></td>\r\n    <td>A node.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nlet node = parseTree.last();\r\nnode.content = 'panda';\r\n```\r\n\r\n```js\r\nlet node = parseTree.last('multilineComment');\r\nnode.content = 'panda';\r\n```\r\n\r\n### parseTree.length\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{number}</i></td>\r\n    <td>Number of child nodes.</td>\r\n  </tr>\r\n</table>\r\n\r\n### parseTree.removeChild(index)\r\n\r\n##### Description\r\n\r\nRemoves a child node at a given position.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{number}</i></td>\r\n    <td>index</td>\r\n    <td>Index of a child node we need to remove.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>Removed node.</td>\r\n  </tr>\r\n</table>\r\n##### Examples\r\n\r\n```js\r\n// Swap nodes.\r\nvar node = parseTree.removeChild(1);\r\nparseTree.insert(0, node);\r\n```\r\n\r\n### parseTree.start\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>\r\n      Start position of the node. Contains following info:\r\n      <ul>\r\n        <li>\r\n          <code>{number} line</code> — first symbol's line number\r\n          (1-based index);\r\n        </li>\r\n        <li>\r\n          <code>{number} column</code> — first symbol's column number\r\n          (1-based index).\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n### parseTree.syntax\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string}</i></td>\r\n    <td>Syntax of original parsed string.</td>\r\n  </tr>\r\n</table>\r\n\r\n### parseTree.toJson()\r\n\r\n##### Description\r\n\r\nConverts parse tree to JSON. Useful for printing.\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Object}</i></td>\r\n    <td>Parse tree in JSON</td>\r\n  </tr>\r\n</table>\r\n\r\n### parseTree.toString()\r\n\r\n##### Description\r\n\r\nConverts parse tree back to string according to original syntax.\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string}</i></td>\r\n    <td>A compiled string.</td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nlet css = parseTree.toString();\r\n```\r\n\r\n### parseTree.traverse(callback)\r\n\r\n##### Description\r\n\r\nCalls the function for every node in a tree including `parseTree` itself.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Function}</i></td>\r\n    <td>callback</td>\r\n    <td>\r\n      Function to apply to every node. Accepts following parameters:\r\n      <ul>\r\n        <li><code>{Object}</code> — a node to which we apply callback;</li>\r\n        <li><code>{number}</code> — node's index number inside its parent;</li>\r\n        <li><code>{Object}</code> — a node's parent;</li>\r\n        <li>\r\n          <code>{number}</code> — node's nesting level relative to its parent.\r\n        </li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\nparseTree.traverse(function(node, index, parent) {\r\n  if (node.is('multilineComment')) {\r\n    parent.removeChild(index);\r\n  } else if (node.is('space')) {\r\n    node.content = ' ';\r\n  }\r\n});\r\n```\r\n\r\n### parseTree.traverseByType(type, callback)\r\n\r\n##### Description\r\n\r\nThis method should be called for a root node, because calling it for a child\r\nwill be more time consuming.    \r\nCalls the function for every node of a given type. This means not just child\r\nnodes, but grandchilds and so on.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string}</i></td>\r\n    <td>type</td>\r\n    <td>\r\n      Node type. For a list of available values please see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>{Function}</i></td>\r\n    <td>callback</td>\r\n    <td>\r\n      Function to apply to every node of a given type.\r\n      Accepts following parameters:\r\n      <ul>\r\n        <li><code>{Object}</code> — a node to which we apply callback;</li>\r\n        <li><code>{number}</code> — node's index number inside its parent;</li>\r\n        <li><code>{Object}</code> — a node's parent.</li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\n// Remove all comments.\r\nparseTree.traverseByType('multilineComment', function(node, nodeData) {\r\n  parent.removeChild(index);\r\n});\r\n```\r\n\r\n### parseTree.traverseByTypes(types, callback)\r\n\r\n##### Description\r\n\r\nThis method should be called for a root node, because calling it for a child\r\nwill be more time consuming.    \r\nCalls the function for every node of given types. This means not just child\r\nnodes, but grandchilds and so on.\r\n\r\n##### Parameters\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{Array.string}</i></td>\r\n    <td>types</td>\r\n    <td>\r\n      List of node types. For a list of available values please see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td><i>{Function}</i></td>\r\n    <td>callback</td>\r\n    <td>\r\n      Function to apply to every node of given types.\r\n      Accepts following parameters:\r\n      <ul>\r\n        <li><code>{Object}</code> — a node to which we apply callback;</li>\r\n        <li><code>{number}</code> — node's index number inside its parent;</li>\r\n        <li><code>{Object}</code> — a node's parent.</li>\r\n      </ul>\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n##### Examples\r\n\r\n```js\r\n// Remove all comments and spaces.\r\nlet types = ['multilineComment', 'space'];\r\nparseTree.traverseByTypes(types, function(node, index, parent) {\r\n  parent.removeChild(index);\r\n});\r\n```\r\n\r\n### parseTree.type\r\n\r\n##### Returns\r\n\r\n<table>\r\n  <tr>\r\n    <td><i>{string}</i></td>\r\n    <td>\r\n      Node type. For a list of available values see\r\n      <a href=\"docs/node-types.md\">\"Node types\"</a>.\r\n    </td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n## Test\r\n\r\nTo run tests:\r\n\r\n    npm test\r\n\r\nThis command will build library files from sources and run tests on all files\r\nin syntax directories.\r\n\r\nEvery test has 3 files: source stylesheet, expected parse tree and expected\r\nstring compiled back from parse tree to css.\r\n\r\nIf some tests fail, you can find information in test logs:\r\n\r\n- `log/test.log` contains all information from stdout;\r\n- `log/expected.txt` contains only expected text;\r\n- `log/result.txt` contains only result text.\r\n\r\nThe last two are made for your convenience: you can use any diff app to see\r\nthe defference between them.\r\n\r\nIf you want to test one specific string or get a general idea of how Gonzales\r\nworks, you can use `test/ast.js` file.    \r\nSimply change the first two strings (`css` and `syntax` vars) and run:\r\n\r\n    node test/single-test.js\r\n\r\n## Report\r\n\r\nIf you find a bug or want to add a feature, welcome to [Issues](https://github.com/tonyganch/gonzales-pe/issues).\r\n\r\nIf you are shy but have a question, feel free to [drop me a\r\nline](mailto:tonyganch+gonzales@gmail.com).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/tonyganch/gonzales-pe.git"
  },
  "scripts": {
    "autofix-tests": "./scripts/build.sh && ./scripts/autofix-tests.sh",
    "build": "./scripts/build.sh",
    "init": "./scripts/init.sh",
    "log": "./scripts/log.sh",
    "test": "./scripts/build.sh && ./scripts/test.sh"
  },
  "version": "3.2.1"
}
